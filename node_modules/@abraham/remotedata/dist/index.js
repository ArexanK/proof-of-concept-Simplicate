export var Kinds;
(function (Kinds) {
    Kinds["Initialized"] = "Initialized";
    Kinds["Pending"] = "Pending";
    Kinds["Failure"] = "Failure";
    Kinds["Success"] = "Success";
})(Kinds || (Kinds = {}));
export class Initialized {
    constructor() {
        this.kind = Kinds.Initialized;
    }
}
export class Pending {
    constructor() {
        this.kind = Kinds.Pending;
    }
}
export class Failure {
    constructor(error) {
        this.error = error;
        this.kind = Kinds.Failure;
        if (error === null || error === undefined) {
            throw new TypeError('Parameter "error" is required');
        }
    }
}
export class Success {
    constructor(data) {
        this.data = data;
        this.kind = Kinds.Success;
        if (data === null || data === undefined) {
            throw new TypeError('Parameter "data" is required');
        }
    }
}
export function fold(initialized, pending, failure, success) {
    return (state) => {
        switch (state.kind) {
            case Kinds.Initialized:
                return initialized();
            case Kinds.Pending:
                return pending();
            case Kinds.Failure:
                return failure(state.error);
            case Kinds.Success:
                return success(state.data);
            default:
                throw new NeverError(state);
        }
    };
}
class NeverError extends Error {
    constructor(value) {
        super(`Unknown RemoteData state: ${value}`);
    }
}
//# sourceMappingURL=index.js.map