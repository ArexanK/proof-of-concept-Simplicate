export declare type RemoteData<E, D> = Initialized | Pending | Failure<E> | Success<D>;
export declare enum Kinds {
    Initialized = "Initialized",
    Pending = "Pending",
    Failure = "Failure",
    Success = "Success"
}
export declare class Initialized {
    readonly kind: Kinds;
}
export declare class Pending {
    readonly kind: Kinds;
}
export declare class Failure<E> {
    error: E;
    readonly kind: Kinds;
    constructor(error: E);
}
export declare class Success<D> {
    data: D;
    readonly kind: Kinds;
    constructor(data: D);
}
export declare function fold<T, E, D>(initialized: () => T, pending: () => T, failure: (error: E) => T, success: (data: D) => T): (state: RemoteData<E, D>) => T;
