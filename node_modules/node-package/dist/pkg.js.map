{"version":3,"file":"pkg.js","sourceRoot":"src/","sources":["pkg.ts"],"names":[],"mappings":"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","sourcesContent":["export type InstallSource = 'npm' | 'git' | 'unpkg';\n\nexport const DEFAULT_INSTALL_SOURCE: InstallSource = 'npm';\n\nexport interface InstallCommand {\n  command: string;\n  id: InstallSource;\n}\n\nexport class Pkg {\n  constructor(private data: PackageData) {\n  }\n\n  public get description(): string {\n    return this.data.description || '';\n  }\n\n  public get git(): string {\n    if (typeof this.data.repository === 'object' && this.data.repository.type === 'git') {\n      return this.data.repository.url;\n    } else {\n      return '';\n    }\n  }\n\n  public get keywords(): string[] {\n    return this.dirtyKeywords.map(keyword => keyword.trim());\n  }\n\n  public get license(): string {\n    if (typeof this.data.license === 'string') {\n      return this.data.license;\n    } else {\n      return '';\n    }\n  }\n\n  public installCommands(global: boolean): InstallCommand[] {\n    const commands: InstallCommand[] = [\n      {\n        command: `npm install ${this.name}${global ? ' --global' : ''}`,\n        id: 'npm',\n      }\n    ];\n    if (this.git) {\n      commands.push({\n        command: `git clone ${this.git}`,\n        id: 'git',\n      });\n    }\n    if (this.unpkg) {\n      commands.push({\n        command: `<script async src=\"${this.unpkg}\"></script>`,\n        id: 'unpkg',\n      });\n    }\n    return commands;\n  }\n\n  public get name(): string {\n    return this.data.name;\n  }\n\n  public get types(): string {\n    return this.data.types || this.data.typings ||  '';\n  }\n\n  public get version(): string {\n    return this.data.version;\n  }\n\n  public get unpkg(): string {\n    return this.webpath ? new URL(`${this.name}/${this.webpath}`, 'https://unpkg.com/').href : '';\n  }\n\n  private get dirtyKeywords(): string[] {\n    if (!this.data.keywords) {\n      return [];\n    }\n    if (typeof this.data.keywords === 'string') {\n      return this.data.keywords.split(',');\n    }\n    return this.data.keywords;\n  }\n\n  private get webpath(): string {\n    if (!!this.data.unpkg) {\n      return this.data.unpkg;\n    } else if (!!this.data.browser) {\n      return this.data.browser;\n    } else if (!!this.data.main) {\n      return this.data.main;\n    } else if (!!this.data.webpack) {\n      return this.data.webpack;\n    } else {\n      return '';\n    }\n  }\n}\n\nexport interface PackageData {\n  author?: string | PersonData;\n  bin?: string | {[index: string]: string};\n  bugs?: string | BugsData;\n  bundledDependencies?: DependenciesData;\n  config?: ConfigData;\n  contributors?: Array<string | PersonData>;\n  cpu?: string[];\n  dependencies?: DependenciesData;\n  description?: string;\n  devDependencies?: DependenciesData;\n  directories?: DirectoriesData;\n  engines?: EnginesData;\n  files?: string[];\n  homepage?: string;\n  keywords?: string[] | string;\n  license?: string | DeprecatedLicenseData;\n  main?: string;\n  man?: string | string[];\n  name: string;\n  optionalDependencies?: DependenciesData;\n  os?: string[];\n  peerDependencies?: DependenciesData;\n  private?: boolean;\n  publishConfig?: ConfigData;\n  repository?: string | RepositoryData;\n  scripts?: {[index: string]: string};\n  version: string;\n\n  // Non-standard\n  browser?: string;\n  readmeFilename?: string;\n  types?: string;\n  typings?: string;\n  unpkg?: string;\n  webpack?: string;\n}\n\nexport interface BugsData {\n  url?: string;\n  email?: string;\n}\n\nexport interface DeprecatedLicenseData {\n  type: string;\n  url: string;\n}\n\nexport interface PersonData {\n  name: string;\n  email?: string;\n  url?: string;\n}\n\nexport interface DirectoriesData {\n  lib?: string;\n  bin?: string;\n  man?: string;\n  doc?: string;\n  example?: string;\n  test?: string;\n}\n\nexport interface RepositoryData {\n  type: string;\n  url: string;\n}\n\nexport interface DependenciesData {\n  [index: string]: string\n}\n\nexport interface EnginesData {\n  node: string;\n  npm?: string;\n}\n\nexport interface ConfigData {\n  [index: string]: string;\n}\n"]}