{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/@abraham/reflection/dist/index.js","webpack:///./dist/utils.js","webpack:///./dist/decorators.js","webpack:///./dist/seed.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","super","getTemplateElement","svgElement","firstChild","before","reparentNodes","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","text","v","setAttribute","_getValue","committer","directive","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","svg","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","querySelector","nativeShadow","removes","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","delete","styleElement","Metadata","ordinaryDefineOwnMetadata","metadataKey","metadataValue","target","propertyKey","includes","TypeError","getMetadataMap","targetMetadata","metadataMap","createMetadataMap","ordinaryGetMetadata","ordinaryGetOwnMetadata","getPrototypeOf","Reflection","decorate","decorators","reverse","decorator","decorated","decorateConstructor","descriptor","decorateProperty","defineMetadata","getMetadata","getOwnMetadata","hasMetadata","hasOwnMetadata","metadata","attributeNameFromProperty","replace","propertyNameFromAttribute","g","toUpperCase","privatePropertyName","Reflect","primitiveTypes","Boolean","Number","observeType","observe","constructor","alreadyObserved","prop","observeName","attributeName","hasAttribute","setter","_ignoreDefaultValue","_ignoredDefaultAttributes","render","configurable","HTMLElement","_connected","attachShadow","upgradeProperties","upgradePropertyAttributes","_name","_oldValue","_newValue","_template","shadowRoot","selectors","concat","attribute","JSON","parse","observedProperties","observedAttributes"],"mappings":"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","file":"seed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","const Metadata = new WeakMap();\nexport function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n    return ordinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n}\nexport function decorate(decorators, target, propertyKey, attributes) {\n    if (decorators.length === 0) {\n        throw new TypeError();\n    }\n    if (typeof target === 'function') {\n        return decorateConstructor(decorators, target);\n    }\n    else if (propertyKey !== undefined) {\n        return decorateProperty(decorators, target, propertyKey, attributes);\n    }\n    return;\n}\nexport function metadata(metadataKey, metadataValue) {\n    return function decorator(target, propertyKey) {\n        ordinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n    };\n}\nexport function getMetadata(metadataKey, target, propertyKey) {\n    return ordinaryGetMetadata(metadataKey, target, propertyKey);\n}\nexport function getOwnMetadata(metadataKey, target, propertyKey) {\n    return ordinaryGetOwnMetadata(metadataKey, target, propertyKey);\n}\nexport function hasOwnMetadata(metadataKey, target, propertyKey) {\n    return !!ordinaryGetOwnMetadata(metadataKey, target, propertyKey);\n}\nexport function hasMetadata(metadataKey, target, propertyKey) {\n    return !!ordinaryGetMetadata(metadataKey, target, propertyKey);\n}\nfunction decorateConstructor(decorators, target) {\n    decorators.reverse().forEach((decorator) => {\n        const decorated = decorator(target);\n        if (decorated) {\n            target = decorated;\n        }\n    });\n    return target;\n}\nfunction decorateProperty(decorators, target, propertyKey, descriptor) {\n    decorators.reverse().forEach((decorator) => {\n        descriptor = decorator(target, propertyKey, descriptor) || descriptor;\n    });\n    return descriptor;\n}\nfunction ordinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey) {\n    if (propertyKey && !['string', 'symbol'].includes(typeof propertyKey)) {\n        throw new TypeError();\n    }\n    (getMetadataMap(target, propertyKey) || createMetadataMap(target, propertyKey))\n        .set(metadataKey, metadataValue);\n}\nfunction ordinaryGetMetadata(metadataKey, target, propertyKey) {\n    return !!ordinaryGetOwnMetadata(metadataKey, target, propertyKey)\n        ? ordinaryGetOwnMetadata(metadataKey, target, propertyKey)\n        : Object.getPrototypeOf(target)\n            ? ordinaryGetMetadata(metadataKey, Object.getPrototypeOf(target), propertyKey)\n            : undefined;\n}\nfunction ordinaryGetOwnMetadata(metadataKey, target, propertyKey) {\n    if (target === undefined) {\n        throw new TypeError();\n    }\n    const metadataMap = getMetadataMap(target, propertyKey);\n    return metadataMap && metadataMap.get(metadataKey);\n}\nfunction getMetadataMap(target, propertyKey) {\n    return Metadata.get(target) && Metadata.get(target).get(propertyKey);\n}\nfunction createMetadataMap(target, propertyKey) {\n    const targetMetadata = Metadata.get(target) || new Map();\n    Metadata.set(target, targetMetadata);\n    const metadataMap = targetMetadata.get(propertyKey) || (new Map());\n    targetMetadata.set(propertyKey, metadataMap);\n    return metadataMap;\n}\nexport const Reflection = {\n    decorate,\n    defineMetadata,\n    getMetadata,\n    getOwnMetadata,\n    hasMetadata,\n    hasOwnMetadata,\n    metadata,\n};\nObject.assign(Reflect, Reflection);\n//# sourceMappingURL=index.js.map","/** Convert `fooBar` to `foo-bar`. */\nexport function attributeNameFromProperty(name) {\n    return name.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();\n}\n/** Convert `foo-bar` to `fooBar`. */\nexport function propertyNameFromAttribute(name) {\n    if (name.includes('-')) {\n        return name.toLowerCase().replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n    }\n    else {\n        return name;\n    }\n}\n/** Convert `foo` to `_foo`. */\nexport function privatePropertyName(name) {\n    return `__${name}`;\n}\n//# sourceMappingURL=utils.js.map","import { Reflection as Reflect } from '@abraham/reflection';\nimport { attributeNameFromProperty, privatePropertyName } from './utils';\nconst primitiveTypes = [Boolean, Number, String];\nfunction isPrimitive(type) {\n    return primitiveTypes.includes(type);\n}\nfunction alreadyObserved(target, name, type) {\n    return target.constructor[observeType(type)].includes(name);\n}\nfunction observeType(type) {\n    return isPrimitive(type) ? 'observedAttributes' : 'observedProperties';\n}\nfunction observeName(prop, type) {\n    return isPrimitive(type) ? attributeNameFromProperty(prop) : prop;\n}\nfunction observe(target, name, type) {\n    if (!alreadyObserved(target, name, type)) {\n        target.constructor[observeType(type)].push(observeName(name, type));\n    }\n}\nfunction getter(name, type) {\n    const attributeName = attributeNameFromProperty(name);\n    return function () {\n        switch (type) {\n            case String:\n                return this.getAttribute(attributeName);\n            case Number:\n                if (this.hasAttribute(attributeName)) {\n                    return Number(this.getAttribute(attributeName));\n                }\n                else {\n                    return null;\n                }\n            case Boolean:\n                return this.hasAttribute(attributeName);\n            default:\n                return this[privatePropertyName(name)];\n        }\n    };\n}\nfunction setter(name, type) {\n    const attributeName = attributeNameFromProperty(name);\n    return function (value) {\n        if (this._ignoreDefaultValue(name) && isPrimitive(type)) {\n            this._ignoredDefaultAttributes[name] = true;\n            return;\n        }\n        else if (!this._ignoredDefaultAttributes[name]) {\n            this._ignoredDefaultAttributes[name] = true;\n        }\n        if (value === null || value === undefined || value === false || value === '') {\n            this.removeAttribute(attributeName);\n        }\n        else {\n            switch (type) {\n                case String:\n                    this.setAttribute(attributeName, String(value));\n                    break;\n                case Number:\n                    this.setAttribute(attributeName, String(value));\n                    break;\n                case Boolean:\n                    this.setAttribute(attributeName, '');\n                    break;\n                default:\n                    this[privatePropertyName(name)] = value;\n            }\n        }\n        this.render();\n    };\n}\nexport function property(options) {\n    return function (target, name) {\n        const type = (options && options.type) || Reflect.getMetadata('design:type', target, name);\n        observe(target, name, type);\n        Object.defineProperty(target, name, {\n            configurable: true,\n            enumerable: true,\n            get: getter(name, type),\n            set: setter(name, type),\n        });\n    };\n}\n//# sourceMappingURL=decorators.js.map","import { html, svg, TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { property } from './decorators';\nimport { attributeNameFromProperty, propertyNameFromAttribute } from './utils';\nclass Seed extends HTMLElement {\n    constructor() {\n        super();\n        this._connected = false;\n        this._ignoredDefaultAttributes = {};\n        this.attachShadow({ mode: 'open' });\n    }\n    /** The component instance has been inserted into the DOM. */\n    connectedCallback() {\n        this._connected = true;\n        this.upgradeProperties();\n        this.upgradePropertyAttributes();\n        this.render();\n    }\n    /** The component instance has been removed from the DOM. */\n    disconnectedCallback() {\n        this._connected = false;\n    }\n    /** Rerender when the observed attributes change. */\n    attributeChangedCallback(_name, _oldValue, _newValue) {\n        this.render();\n    }\n    /** Render the component. */\n    render() {\n        if (this._connected) {\n            render(this._template, this.shadowRoot, { scopeName: this.tagName.toLowerCase() });\n        }\n    }\n    /** Helper to query the rendered shadowRoot with querySelector. `this.$('tag.class')` */\n    $(selectors) {\n        return this.shadowRoot.querySelector(selectors);\n    }\n    /** Helper to query the rendered shadowRoot with querySelectorAll. `this.$$('tag.class')` */\n    $$(selectors) {\n        return this.shadowRoot.querySelectorAll(selectors);\n    }\n    /** Combine the components styles and template. */\n    get _template() {\n        return html `\n    <style>\n      :host {\n        display: block;\n        overflow: hidden;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n    ${this.styles}\n    ${this.template}\n    <!-- Built, tested, and published with Nutmeg. https://nutmeg.tools -->\n    `;\n    }\n    /** Support lazy properties https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties */\n    upgradeProperties() {\n        const instance = this;\n        const props = (instance).constructor['observedAttributes'].concat((instance).constructor['observedProperties']);\n        props.forEach((prop) => {\n            if (instance.hasOwnProperty(prop)) {\n                let value = (instance)[prop];\n                delete (instance)[prop];\n                (instance)[prop] = value;\n            }\n        });\n    }\n    /** Perform a one-time upgrade of complex properties from JSON encoded attributes. */\n    upgradePropertyAttributes() {\n        const instance = this;\n        (instance).constructor['observedProperties'].forEach((prop) => {\n            const attribute = attributeNameFromProperty(prop);\n            if (instance.hasAttribute(attribute)) {\n                (instance)[prop] = JSON.parse(instance.getAttribute(attribute));\n                instance.removeAttribute(attribute);\n            }\n        });\n    }\n    /** Assume TypeScript is setting a default value and it should be ignored because of a user set value. */\n    _ignoreDefaultValue(name) {\n        return !this._connected && !this._ignoredDefaultAttributes[name] && this.hasAttribute(attributeNameFromProperty(name));\n    }\n}\nSeed.observedProperties = [];\nSeed.observedAttributes = [];\nexport { attributeNameFromProperty, html, property, propertyNameFromAttribute, Seed, svg, TemplateResult };\n//# sourceMappingURL=seed.js.map"],"sourceRoot":""}