import { html, svg, TemplateResult } from 'lit-html';
import { property } from './decorators';
import { attributeNameFromProperty, propertyNameFromAttribute } from './utils';
/** Extending classes are expected to define `template` and `styles`. */
interface Seed {
    template: TemplateResult;
    styles: TemplateResult;
    shadowRoot: ShadowRoot;
}
declare class Seed extends HTMLElement {
    private _connected;
    _ignoredDefaultAttributes: {
        [index: string]: boolean;
    };
    static observedProperties: string[];
    static observedAttributes: string[];
    constructor();
    /** The component instance has been inserted into the DOM. */
    connectedCallback(): void;
    /** The component instance has been removed from the DOM. */
    disconnectedCallback(): void;
    /** Rerender when the observed attributes change. */
    attributeChangedCallback(_name: string, _oldValue: any, _newValue: any): void;
    /** Render the component. */
    render(): void;
    /** Helper to query the rendered shadowRoot with querySelector. `this.$('tag.class')` */
    $(selectors: string): HTMLElement;
    /** Helper to query the rendered shadowRoot with querySelectorAll. `this.$$('tag.class')` */
    $$(selectors: string): NodeListOf<HTMLElement>;
    /** Combine the components styles and template. */
    private get _template();
    /** Support lazy properties https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties */
    private upgradeProperties;
    /** Perform a one-time upgrade of complex properties from JSON encoded attributes. */
    private upgradePropertyAttributes;
    /** Assume TypeScript is setting a default value and it should be ignored because of a user set value. */
    _ignoreDefaultValue(name: string): boolean;
}
export { attributeNameFromProperty, html, property, propertyNameFromAttribute, Seed, svg, TemplateResult };
