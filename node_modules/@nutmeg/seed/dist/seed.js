import { html, svg, TemplateResult } from 'lit-html';
import { render } from 'lit-html/lib/shady-render';
import { property } from './decorators';
import { attributeNameFromProperty, propertyNameFromAttribute } from './utils';
class Seed extends HTMLElement {
    constructor() {
        super();
        this._connected = false;
        this._ignoredDefaultAttributes = {};
        this.attachShadow({ mode: 'open' });
    }
    /** The component instance has been inserted into the DOM. */
    connectedCallback() {
        this._connected = true;
        this.upgradeProperties();
        this.upgradePropertyAttributes();
        this.render();
    }
    /** The component instance has been removed from the DOM. */
    disconnectedCallback() {
        this._connected = false;
    }
    /** Rerender when the observed attributes change. */
    attributeChangedCallback(_name, _oldValue, _newValue) {
        this.render();
    }
    /** Render the component. */
    render() {
        if (this._connected) {
            render(this._template, this.shadowRoot, { scopeName: this.tagName.toLowerCase() });
        }
    }
    /** Helper to query the rendered shadowRoot with querySelector. `this.$('tag.class')` */
    $(selectors) {
        return this.shadowRoot.querySelector(selectors);
    }
    /** Helper to query the rendered shadowRoot with querySelectorAll. `this.$$('tag.class')` */
    $$(selectors) {
        return this.shadowRoot.querySelectorAll(selectors);
    }
    /** Combine the components styles and template. */
    get _template() {
        return html `
    <style>
      :host {
        display: block;
        overflow: hidden;
      }

      :host([hidden]) {
        display: none;
      }
    </style>
    ${this.styles}
    ${this.template}
    <!-- Built, tested, and published with Nutmeg. https://nutmeg.tools -->
    `;
    }
    /** Support lazy properties https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties */
    upgradeProperties() {
        const instance = this;
        const props = (instance).constructor['observedAttributes'].concat((instance).constructor['observedProperties']);
        props.forEach((prop) => {
            if (instance.hasOwnProperty(prop)) {
                let value = (instance)[prop];
                delete (instance)[prop];
                (instance)[prop] = value;
            }
        });
    }
    /** Perform a one-time upgrade of complex properties from JSON encoded attributes. */
    upgradePropertyAttributes() {
        const instance = this;
        (instance).constructor['observedProperties'].forEach((prop) => {
            const attribute = attributeNameFromProperty(prop);
            if (instance.hasAttribute(attribute)) {
                (instance)[prop] = JSON.parse(instance.getAttribute(attribute));
                instance.removeAttribute(attribute);
            }
        });
    }
    /** Assume TypeScript is setting a default value and it should be ignored because of a user set value. */
    _ignoreDefaultValue(name) {
        return !this._connected && !this._ignoredDefaultAttributes[name] && this.hasAttribute(attributeNameFromProperty(name));
    }
}
Seed.observedProperties = [];
Seed.observedAttributes = [];
export { attributeNameFromProperty, html, property, propertyNameFromAttribute, Seed, svg, TemplateResult };
//# sourceMappingURL=seed.js.map