{"version":3,"file":"seed.js","sourceRoot":"src/","sources":["seed.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, svg, TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { property } from './decorators';\nimport { attributeNameFromProperty, propertyNameFromAttribute } from './utils';\n\n/** Extending classes are expected to define `template` and `styles`. */\ninterface Seed {\n  template: TemplateResult;\n  styles: TemplateResult;\n  shadowRoot: ShadowRoot;\n}\n\nclass Seed extends HTMLElement {\n  private _connected = false;\n  public _ignoredDefaultAttributes: { [index: string]: boolean } = {};\n  public static observedProperties: string[] = [];\n  public static observedAttributes: string[] = [];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  /** The component instance has been inserted into the DOM. */\n  public connectedCallback() {\n    this._connected = true;\n    this.upgradeProperties();\n    this.upgradePropertyAttributes();\n    this.render();\n  }\n\n  /** The component instance has been removed from the DOM. */\n  public disconnectedCallback() {\n    this._connected = false;\n  }\n\n  /** Rerender when the observed attributes change. */\n  public attributeChangedCallback(_name: string, _oldValue: any, _newValue: any) {\n    this.render();\n  }\n\n  /** Render the component. */\n  public render(): void {\n    if (this._connected) {\n      render(this._template, this.shadowRoot, { scopeName: this.tagName.toLowerCase() });\n    }\n  }\n\n  /** Helper to query the rendered shadowRoot with querySelector. `this.$('tag.class')` */\n  public $(selectors: string): HTMLElement {\n    return this.shadowRoot.querySelector(selectors) as HTMLElement;\n  }\n\n  /** Helper to query the rendered shadowRoot with querySelectorAll. `this.$$('tag.class')` */\n  public $$(selectors: string): NodeListOf<HTMLElement> {\n    return this.shadowRoot.querySelectorAll(selectors);\n  }\n\n  /** Combine the components styles and template. */\n  private get _template(): TemplateResult {\n    return html`\n    <style>\n      :host {\n        display: block;\n        overflow: hidden;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n    ${this.styles}\n    ${this.template}\n    <!-- Built, tested, and published with Nutmeg. https://nutmeg.tools -->\n    `;\n  }\n\n  /** Support lazy properties https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties */\n  private upgradeProperties() {\n    const instance = <any>this;\n    const props = (instance).constructor['observedAttributes'].concat((instance).constructor['observedProperties']);\n    props.forEach((prop: string) => {\n      if (instance.hasOwnProperty(prop)) {\n        let value = (instance)[prop];\n        delete (instance)[prop];\n        (instance)[prop] = value;\n      }\n    });\n  }\n\n  /** Perform a one-time upgrade of complex properties from JSON encoded attributes. */\n  private upgradePropertyAttributes() {\n    const instance = <any>this;\n    (instance).constructor['observedProperties'].forEach((prop: string) => {\n      const attribute = attributeNameFromProperty(prop);\n      if (instance.hasAttribute(attribute)) {\n        (instance)[prop] = JSON.parse(instance.getAttribute(attribute));\n        instance.removeAttribute(attribute);\n      }\n    });\n  }\n\n  /** Assume TypeScript is setting a default value and it should be ignored because of a user set value. */\n  public _ignoreDefaultValue(name: string): boolean {\n    return !this._connected && !this._ignoredDefaultAttributes[name] && this.hasAttribute(attributeNameFromProperty(name));\n  }\n}\n\nexport { attributeNameFromProperty, html, property, propertyNameFromAttribute, Seed, svg, TemplateResult };\n"]}